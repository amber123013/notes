01.  git init > 初始化仓库
02.  git config --global user.name "amber123013"
     git config --global user.email "1193756987@qq.com" > 配置 用户名and邮箱
03.  git and fileName  > 提交一个文件到staging area(暂存区)
04.  git commit -m "message" > 提交
05.  git clone https://github.com/xx/xxx  > 从 远端克隆仓库到本地
06.  git clone https://github.com/xx/xxx 'aa'  >  克隆到文件夹aa中
07、08.  .gitignore 文件存放在仓库的根目录下，专用于配置可忽略文件的规则，它是
        一个文本文件，每行书写一条规则，常用的规则举例如下：
        # 忽略掉文件名是 foo.txt 的这个文件
        foo.txt
        # 忽略所有 log 文件
        *.log
        # 但 important.log 是个例外，不忽略
        !imprtant.log
09、10.  git status > 查看仓库的状态
     git status -sb > 以紧凑的方式查看
11.  git rm fileName > 从暂存区中移除文件(目录中的文件也被删除)
12.  git rm --cached fileName  > 仅仅从暂存区中移除文件
13.  git stash > 把当前环境"藏"到一个临时区 把工作环境恢复为最后一次提交的状态
     git stash list > 列出所有暂存的环境
     git stash pop  > 取出暂存的环境
14.  git mv oldfileName newfileName > 该命令(相比于mv)会自动把改动记录到暂存区(改名)
15.  git mv *.html ./src  > 将所有.html移动到当前目录下的src文件夹下
        ./代表当前目录
16.  git log > 每执行一次git commit命令都会在仓库里留下一个更新日志，可以
        --decorate 显示分支 标签
        通过git log命令查看历史日志。查询结果按倒序列出所有更新。每条日志包含一个
        40位hash值 name email 提交日期 and 说明
        git log --pretty=oneline > 以紧凑的格式显示，每行显示一次提交
        只列出提交的 hash 值和说明，便于快速查看多条日志。
17.  git tag your-tag > 给最近一次提交打标签
     git tag -a your-tag > 像commit 一样带注解
     git tag -a <tagname> -m "这是一个标签" > 指定一个标签的信息
        commit 是细粒度的、面向程序员的，每写一个函数、每修正一个 bug，都可以提交一个 commit，而 tag 是粗粒度的、面向用户的，一般只有在增加或优化了一个用户可感知的功能时，才打一个 tag，软件的版本号就是最常见的 tag 形式，一个新的版本号意味着要对外发布一个新的 release 包。
     git tag your-tag a38862a5a860 > 给某次提交打标签 后面是该提交的hash(前几位)
     git tag > 列出所有标签
     git tag -d your-tag > 删除标签 git log -decorate 带标签的log
18.  git push tags > 推送标签到远程仓库
        在默认情况下标签是不会被 git push 命令推送到远程服务器的，也就是说，你在本地打的标签，如果没有刻意指定把它推送到服务器，别人是看不到的。
19.  git commit --amend -m "new message" > 提交追加到最近一次提交(先提交一个文件 先git add 再使用此命令)
     git commit --amend -C HEAD > -C 表示使用已提交过的说明，HEAD
        表示最近一次提交，加在一起就是使用最近一次的提交说明。
        文件没提交全是很常见的小失误，解决办法就是先用 git add 把忘记提交的文件添加到暂存区，再用 git commit 命令加 --amend 参数把文件追加到最近一次提交中去
20.  git commit > 提交时间为现在
     git commit --date="2017-12-30" > 设置提交时间为一个绝对时间
     git commit --date="10 minutes ago" > 提交时间为十分钟前
21.  git reset your-file > 把一个修改过的文件从暂存区移出(之前提交的版本还在
        而git rm --cached 将文件状态改为untracked即从追踪对象中删除它，但让文件在磁盘上保持原封不动)
22.  git reset --soft HEAD^ > 撤销最后一次commit (并且暂存区和工作目录的文件均不受影响。
        即暂存区的内容回退为提交前的状态 之前的git commit --amend 相当于 git reset --soft HEAD^ + git commit)
23.  git checkout your-file > 用最后一次提交的文件覆盖掉工作目录中的同名文件(不可撤销)
24、25.  git remote > 查看连接的远程仓库
         git remote -v > 查看远程仓库详细信息包括url
26.  git pull remote-name branch-name > 得到远程仓库的最新内容 remote-name 是远程仓库的名字，branch-name 是远程
        仓库的分支名字，如果是主干，那就是 master。该命令执行之后，远程仓库的代码会自动合并到本地项目中。
27.  git remote add remote-name remote-url > 添加远程仓库(如果项目是 clone 来的，那么 Git 会并把 clone 命令的仓库地址保存下来
28.  git push remote-name branch-name > 这条命令是把本地的文件推送到远程仓库，remote-name是远程仓库名，branch-name是分支名，
        如果你没有重命名过它们，那它们默认的名称分别是 origin 和 master
     git push -u remote-name branch-name > -u 记住参数 把 remote-name 和 branch-name 记住
     git push > 如果已经记住参数了， 直接git push就行了
        多人开发时，推送是有先有后的，按照 Git 的规则，在你推送时如果已经有人比你早推送了，
        你若再推送就会收到一个 "non-fast forward" 的提示，直译就是“不能快进”。那么此时你至少有2种办法来解决：
        方法一，先用 git pull 命令把远程仓库的最新代码合并到本地，然后再提交。这时本地的提交和远程的提交按时间顺序混合排列。
        方法二
     git rebase > 把本地仓库的更新排到远程仓库更新之后，那这时候本地仓库的所有提交都排在远程仓库的最后一次提交之后。
29.  git diff > 查看没有add的内容修改(所有修改的文件)
     git diff fileName > 查看fileName 的修改
30.  git blame your-file > 列出指定文件的所有代码，每行代码的左侧会列出它最后一次被更新时的 HASH 值、开发者和时间
31.  git branch branch-name > 创建分支
     git branch > 查看分支
     git branch -r > 查看远程分支
32.  git checkout branch-name > 切换分支
     git checkout -b branch-name > 创建并切换到分支
     git checkout - > 切换到上次所在分支 用于在两个分支之间切换
33.  git checkout tag-name > 切换到指定tag下
34.  git checkout tags/tag-name > 切换到tag 当有同名的分支 默认切换到分支
35.  git branch branch-name hash-code > 在某次提交的基础上创建分支
36.  git branch -d branch-name > 删除分支
37.  同28
38.  git merge branch-name > 合并分支到当前分支
39.  git fetch > 把远程仓库的数据抓取到本地，但不合并到本地分支
     git branch -r > 查看远程分支
     git log remote-name/branch-name > 查看远程分支日志
40.  git rebase
        git rebase 和 git merge 都是用来合并，各有优缺点，所以有些团队会约定合并时只能用 git merge 或只能用 git rebase，如果约定只能用 git rebase 来合并，这种工作方式就被称为 'git rebase 工作流'。在用 git rebase 合并分支时，合并后的日志并非按各分支的提交时间排列，而是把一个分支的日志全部排列在另一个分支的日志之上，即使它们是并行开发的，在开发过程中交错提交，但看起来也好像是按先后顺序开发的一样。(本分支的log会在合并进来分支的上面)

