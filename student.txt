source venv/bin/activate
sha1:c1bea330ed73:bc2221eaf2e5e5db67c1864391a73eafa4ded048

# 不启动ssl，不记录日志输出，作为后台进程启动jupyter notebook
nohup jupyter notebook >/dev/null 2>&1 &
jupyter notebook作为后台进程启动后，如果想要停止它，可以先找到进程ID，然后kill。
# 查看进程
ps -ef | grep 'jupyter notebook'
# 输出如下，这里的21983即为进程id，
# hadoop    22136  21983  0 09:10 pts/1    00:00:00 grep jupyter notebook
# 杀死进程
kill -9 21983
# 此时浏览器无法再连接jupyter notebook了吧。

ctrl+shift+k 删除整行
ctrl+shift+p 控制
ctrl+p 跳转文件夹
ctrl+` 打开控制行
ctrl+enter 下面新增一行 并移动
ctrl+shift+enter 上面新增一行 并移动
ctrl+shift + 方向键 整行上下移动
ctrl+w 关闭当前标签
ctrl+shift+t 恢复刚刚关闭的标签
alt+shift+(1, 2, 3, 4, 5) 分屏
ctrl+(1, 2, 3, 4) 跳转到在指定屏(光标)
ctrl+shift+(1, 2, 3, 4) 将当前屏跳转到指定屏
F11 全屏
shift+F11 无干扰全屏
alt 调出菜单
开关菜单栏(打开控制 搜索VIEW:Toggle Menu)
ctrl+shfit + ↑↓ 上下移动选中内容

ord() 取得整数的数字表示
chr() 将编码转成对应字符
Unicode表示的str通过encode()方法可以编码为指定的bytes
encode('utf-8')

len('ab') 计算字符长度
list[] tuple() dict{} set set() 创建一个set需要提供一个list作为输入集合
set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：& 并集 | 交集
Python的函数返回多值其实就是返回一个tuple
dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
>>> d.get('Thomas', -1)

可变参数def calc(*numbers):接收到的是一个tuple
 nums = [1, 2, 3]
>>> calc(*nums) 将一个list当成可变参数传入

默认参数 def enroll(name, gender, age=6, city='Beijing'):
    调用 enroll('Adam', 'M', city='Tianjin')可以按顺序输入或如前所示

关键字参数 def person(name, age, **kw):
extra = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **extra)
kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra
kw 是一个dict（字典）

命名关键装字参数
只接收city和job作为关键字参数。这种方式定义的函数如下：
def person(name, age, *, city, job):
    print(name, age, city, job)
如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：
def person(name, age, *args, city, job):
    print(name, age, args, city, job)
命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错

参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数 任何函数都可以这样调用func(*args, **kw)

切片
L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
如果第一个索引是0，还可以省略：
>>> L[:3]
所有数，每5个取一个： >>> L[::5]   只写[:]就可以原样复制一个list：
tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple
字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：
>>> 'ABCDEFG'[:3]
'ABC'
>>> 'ABCDEFG'[::2]
'ACEG'
>>> 'abcd'[::-1] 得到 'dcba'

比如dict就可以迭代
 d = {'a': 1, 'b': 2, 'c': 3}
>>> for key in d:
如果要迭代value，可以用for value in d.values()如果要同时迭代key和value，可以用for k, v in d.items()
字符串也是可迭代对象，因此，也可以作用于for循环：
>>> for ch in 'ABC'
for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：
>>> for x, y in [(1, 1), (2, 4), (3, 9)]:
...     print(x, y)
判断一个对象是否是可迭代对象
from collections import Iterable
isinstance('abc', Iterable)

列表生成器 [x * x for x in range(1, 11) if x % 2 == 0]
           [4, 16, 36, 64, 100]
生成的元素x * x放到前面，后面跟for循环 for循环后面还可以加上if判断
还可以使用两层循环，可以生成全排列：
>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
[x for x in os.listdir('c:')] 列出目录下的所以后文件和目录名

----------------------------------------------------------------------------

生成器
要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator
g = (x * x for x in range(10))
通过next()函数获得generator的下一个返回值：
>>> next(g)
0
generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素
使用for循环，因为generator也是可迭代对象：
>>> g = (x * x for x in range(10))
>>> for n in g:
...     print(n)
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'
定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行
基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代
遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for循环随之结束

迭代器
可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
直接作用于for循环的对象统称为可迭代对象：Iterable
isinstance()判断一个对象是否是Iterator(Iterable)对象
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
把list、dict、str等Iterable变成Iterator可以使用iter()函数
>>> isinstance(iter('abc'), Iterator)
True
Python的for循环本质上就是通过不断调用next()函数实现的

高阶函数
函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator
reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数(f)必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
把str转换为int的函数：
 def fn(x, y):
...     return x * 10 + y
>>> def char2num(s):
...     return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
>>> reduce(fn, map(char2num, '13579'))

过滤器
filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
在一个list中，删掉偶数，只保留奇数，可以这么写：
def is_odd(n):
    return n % 2 == 1
list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
filter()函数返回的是一个Iterator，也就是一个惰性序列

lambda 表达式(匿名函数) x,n 是输入参数 x % n > 0 是函数的返回值(return)
lambda x,n = n: x % n > 0
匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果
匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：
>>> f = lambda x: x * x
>>> f(5)
25
可以把匿名函数作为返回值返回，比如：
def build(x, y):
    return lambda: x * x + y * y //没有参数

sorted()函数就可以对list进行排序
sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序：
>>> sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]
对字符串排序，是按照ASCII的大小比较的
sorted传入key函数，即可实现忽略大小写的排序：
要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True
>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)

闭包 返回的函数 会包含外部函数的所有变量和参数
一个函数可以返回一个计算结果，也可以返回一个函数。
返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。

装饰器(Decorator)
本质上，decorator就是一个返回函数的高阶函数
def log(func):
    @functools.wraps(func) //把原始函数的__name__等属性复制到wrapper()函数中
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper
@log      //把@log放到now()函数的定义处，相当于执行了语句：now = log(now)
def now():
    print('2015-3-25')
>>> now()
call now():
2015-3-25
原来的now()函数仍然存在，只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数。

functools.partial在旧函数的基础上换了默认参数值，返回新函数
int2 = functools.partial(int, base=2) 相当于
def int2(x, base=2):
    return int(x, base)
--------------------------------------------------------------------------

在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。
import sys
导入sys模块后，我们就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能

作用域
类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途
比如的__author__，__name__ 比如上面的__author__，__name__
类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等
之所以是不应该是因为 python 没有一种方法可以完全限制访问private的函数或变量
但从编程习惯上不应引用private函数或变量
外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public

class Student(object):
    pass
object 是继承的父类 所有的类都继承至这个类
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score
__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。
有了__init__方法 实例化的时候必须传入参数 self由Python传入
和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数 其他有普通的函数相同
Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：
创建实例
变量名=类名（）
>>> bart = Student('Bart Simpson', 59)
>>> lisa = Student('Lisa Simpson', 87)
>>> bart.age = 8
>>> bart.age
8
>>> lisa.age
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'age'

如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外 部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。
变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量
不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以仍然可以通过_Student__name来访问__name变量(不同版本的Python解释器改的不同)
>>> bart.__name = 'New Name' # 设置__name变量！
>>> bart.__name
'New Name'
表面上看，外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一个变量！内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart新增了一个__name变量。

继承 多态
对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。
对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：
这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子
Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。

基本类型都可以用type()判断 基本类型都可以用type()判断
>>> type(abs) 它返回对应的Class类型
>>> type(abs)==types.BuiltinFunctionType
True  判断对象是否是函数
isinstance() 可以告诉我们，一个对象是否是某种类型。
isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。
并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：
>>> isinstance([1, 2, 3], (list, tuple))
True

使用dir()
获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list
类似__xxx__的属性和方法在Python中都是有特殊用途的，比如__len__方法返回长度。在Python中，如果你调用len()函数试图获取一个对象的长度，实际上，在len()函数内部，它自动去调用该对象的__len__()方法，所以，下面的代码是等价的：
>>> len('ABC')
3
>>> 'ABC'.__len__()
3
我们自己写的类，如果也想用len(myObj)的话，就自己写一个__len__()方法：
>>> class MyDog(object):
...     def __len__(self):
...         return 100
仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态
>>> obj = MyObject()
>>> hasattr(obj, 'x') # 有属性'x'吗？
>>> setattr(obj, 'y', 19) # 设置一个属性'y'
>>> getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404
也可以获得对象的方法
一个正确的用法的例子如下：
def readImage(fp):
    if hasattr(fp, 'read'):
        return readData(fp)
    return None

实例属性 和 类属性
可以直接在class中定义属性，这种属性是类属性，归Student类所有：
class Student(object):
    name = 'Student'
当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。
而这种是实例属性 只有这个实例有(score) s = Student('Bob') s.score = 90
因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。del s.name # 如果删除实例的name属性

---------------------------------------------------------------------------

创建了一个class的实例后，我们可以给该实例绑定任何属性和方法
给一个实例绑定的方法，对另一个实例是不起作用的
 s.set_age = MethodType(set_age, s) # 给实例绑定一个方法
为了给所有实例都绑定方法，可以给class绑定方法：
>>> def set_score(self, score):
...     self.score = score
>>> Student.set_score = set_score #给类绑定方法
限制实例的属性使用 __slots__变量
class Student(object):
    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
__slots__定义的属性仅对当前实例起作用对继承他的子类不起作用
除非在子类中也定义__slots__，这样，子类实例允许定义的属性就是自身的__slots__加上父类的__slots__。

@property装饰器就是负责把一个方法变成属性调用的
class Student(object):
    @property
    def birth(self):       #birth是可读写属性 有getter和setter方法
        return self._birth
    @birth.setter
    def birth(self, value):
        self._birth = value
    @property
    def age(self):         #age是只读属性  只有getter方法
        return 2015 - self._birth

class Dog(Mammal, Runnable):
    pass
多重继承 通过多重继承，一个子类就可以同时获得多个父类的所有功能。
如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。

__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串，也就是说，__repr__()是为调试服务的
class Student(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return 'Student object (name=%s)' % self.name
    __repr__ = __str__
__iter__
如果一个类想被用于for ... in循环
类似list或tuple那样，就必须实现一个__iter__()方法，该方法返回一个迭代对象
然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环
以斐波那契数列为例，写一个Fib类，可以作用于for循环：
class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1 # 初始化两个计数器a，b
    def __iter__(self):
        return self # 实例本身就是迭代对象，故返回自己
    def __next__(self):
        self.a, self.b = self.b, self.a + self.b # 计算下一个值
        if self.a > 100000: # 退出循环的条件
            raise StopIteration()
        return self.a # 返回下一个值
Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：
>>> Fib()[5]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'Fib' object does not support indexing
要表现得像list那样按照下标取出元素，需要实现__getitem__()方法
class Fib(object):
    def __getitem__(self, n):
        a, b = 1, 1
        for x in range(n):
            a, b = b, a + b
        return a
现在，就可以按下标访问数列的任意一项了：
>>> f = Fib()
>>> f[0]
1
切片操作时Fib却报错。原因是__getitem__()传入的参数可能是一个int，也可能是一个切片对象slice，所以要做判断：
class Fib(object):
    def __getitem__(self, n):
        if isinstance(n, int): # n是索引
            a, b = 1, 1
            for x in range(n):
                a, b = b, a + b
            return a
        if isinstance(n, slice): # n是切片
            start = n.start
            stop = n.stop
            if start is None:
                start = 0
            a, b = 1, 1
            L = []
            for x in range(stop):
                if x >= start:
                    L.append(a)
                a, b = b, a + b
            return L

当找不到属性时会调用__getattr__()
def __getattr__(self, attr):
        if attr=='age':
            return lambda: 25
        raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)
这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段

定义一个__call__()方法，就可以直接对实例进行调用
class Student(object):
    def __init__(self, name):
        self.name = name
    def __call__(self):
        print('My name is %s.' % self.name)
调用方式如下：
>>> s = Student('Michael')
>>> s() # self参数不要传入
My name is Michael.
能被调用的对象就是一个Callable对象，比如函数和我们上面定义的带有__call__()的类实例
>>> callable(Student())
True
>>> callable(max)
True
>>> callable([1, 2, 3])
False

枚举类
from enum import Enum
@unique
class Color(Enum):
    red = 1
    orange = 2
    yellow = 3
    green = 4
    blue = 5
    indigo = 6
    purple = 7
 通过成员的名称来获取成员  Color['red']
 通过成员值来获取成员      Color(2)
 通过成员，来获取它的名称和值
red_member = Color.red
red_member.name
red_member.value
枚举支持迭代器，可以遍历枚举成员 for in
枚举成员可进行同一性比较 Color.red is Color.red 输出结果是：True
枚举成员可进等值比较     Color.blue == Color.red  输出结果是：False

type()函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过type()函数创建出Hello类，而无需通过class Hello(object)...的定义：
>>> def fn(self, name='world'): # 先定义函数
...     print('Hello, %s.' % name)
>>> Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class
要创建一个class对象，type()函数依次传入3个参数：
class的名称；
继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。
通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。
动态语言本身支持运行期动态创建类

metaclass
当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例
如果我们想创建出类  可以先定义metaclass，就可以创建类，最后创建实例
所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。

assert n != 0, 'n is zero!' assert的意思是，表达式n != 0应该是True
如果断言失败，assert语句本身就会抛出AssertionError
和assert比，logging不会抛出错误，而且可以输出到文件
logging.basicConfig(level=logging.INFO) 允许记录的信息级别
debug，info，warning，error
pdb
启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态
pdb.set_trace()
然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点
运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行

单元测试
import unittest # 导入单元测试模块
class TestDict(unittest.TestCase): # 继承单元类
    def test_key(self):            # 测试方法必须与test开头不然不被识别
        d = Dict()
        d['key'] = 'value'
        self.assertEqual(d.key, 'value') #断言d.key 的值为 'value'
    d = Dict()
        with self.assertRaises(AttributeError): # 期待下面的语句抛出指定异常
            value = d.empty                     # with  as 相当于try（即这行的代码在try的包裹下）
执行单元测试有两种执行方法
1.添加if __name__ == '__main__':
          unittest.main()
2.在命令行通过参数-m unittest 直接运行单元测试
python -m unittest mydict_test
可以在单元测试中编写两个特殊的setUp()和tearDown()方法。这两个方法会分别在每调用一个测试方法的前后分别被执行
 def setUp(self):
        print('setUp...')
def tearDown(self):
        print('tearDown...')

文档测试
doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确
只有测试异常的时候，可以用...表示中间一大段烦人的输出
编写注释时，如果写上这样的注释：
'''
    Simple dict but also support access as x.y style.

    >>> d1 = Dict()
    >>> d1['x'] = 100
    >>> d1.x
    100
    >>> d1.y = 200
    >>> d1['y']
    200
    >>> d2 = Dict(a=1, b=2, c='3')
    >>> d2.c
    '3'
>>> d2['empty']
    Traceback (most recent call last):
        ...
    KeyError: 'empty'
'''
if __name__=='__main__':
    import doctest
    doctest.testmod() #执行文档测试
doctest非常有用，不但可以用来测试，还可以直接作为示例代码。通过某些文档生成工具，就可以自动把包含doctest的注释提取出来。用户看文档的时候，同时也看到了doctest。


